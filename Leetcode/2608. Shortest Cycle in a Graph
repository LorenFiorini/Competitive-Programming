
class Solution {
    /*
    int bfs(vector<vector<int>>& adj, vector<int> &used, int n, int i) {
        queue<int> q;
        q.push(i);
        used[i] = 1;
        set<vector<int>> st;
        
        
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            for (int nxt: adj[cur]) {
                vector<int> par = {min(cur, nxt), max(cur, nxt)};
                if (st.find(par) == st.end()) continue;
                if (used[nxt] == 0) {
                    used[nxt] = used[cur] + 1;
                    q.push(nxt);
                    st.insert(par);
                } else {
                    return used[cur] - used[nxt];
                }
            }
        }
        return 1e9;
    }*/
    set<int> vis;
    int dfs(vector<vector<int>>& adj, vector<int> &used, int n, int cur) {
        int ans = 1e9;
        vis.insert(cur);
        for (int nxt: adj[cur]) {
            if (used[nxt] == -1) {
                used[nxt] = used[cur] + 1;
                ans = min(ans, dfs(adj, used, n, nxt));
                used[nxt] = 0;
            } else if (abs(used[cur] - used[nxt]) > 1) {
                ans = min(ans, abs(used[cur] - used[nxt]) + 1);
            }
            //if (ans < used[cur]) break;
        }
        return ans;
    }
public:
    int findShortestCycle(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        for (auto p: edges) {
            adj[p[0]].push_back(p[1]);
            adj[p[1]].push_back(p[0]);
        }
        int ans = 1e9;
        vector<int> used(n, -1);
        for (int i = 0; i < n; i++) {
            if (used[i] == -1) {
                //ans = min(ans, bfs(adj, used, n, i));
                used[i] = 0;
                ans = min(ans, dfs(adj, used, n, i));
            }
        }
        
        if (ans == 1e9) ans = -1;
        return ans;
    }
};

/*

7
[[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]
4
[[0,1],[0,2]]
6
[[4,1],[3,2],[5,0],[3,0],[4,0],[2,1],[5,1]]
10
[[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[4,5],[4,6],[4,7],[4,8],[4,9],[5,6],[5,7],[5,8],[5,9],[6,7],[6,8],[6,9],[7,8],[7,9],[8,9]]

*/